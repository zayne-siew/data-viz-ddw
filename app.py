"""Main Python application to run Flask and display the web application."""

from datetime import date
from typing import Any, Callable, Mapping, Optional, Tuple, Union

from dash import Dash, Input, Output, callback, ctx, dcc, html, no_update
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


# Define constants
APP_TITLE = 'Predicting Livestock Production in Somalia'
EXTERNAL_STYLESHEET = [{
    'href': 'https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap',
    'rel': 'stylesheet'
}]
FEATURE_COLOUR = '#17B897'
TARGET_COLOUR = '#E12D39'
MENU_FEATURE_COLOUR = '#079A82'
MENU_TARGET_COLOUR = '#FF3333'
HIGHLIGHT_COLOUR = '#D4AF37'

# Define IDs
DATE_PICKER_ID = 'date-picker'
MENU_TITLE_ID = 'menu-title'
CARD_ID = 'card'
WRAPPER_ID = 'chart-wrapper'

# Define chart titles
AID_TITLE = 'Net Developmental Assistance (USD)'
BIRTH_TITLE = 'Births per 1000 People'
DEATH_TITLE = 'Deaths per 1000 People'
INFLATION_TITLE = 'Consumer Price Inflation (YoY)'
RAINFALL_TITLE = 'Annual Mean Rainfall'
TEMPERATURE_TITLE = 'Annual Mean Temperature'
LIVESTOCK_TITLE = 'Livestock Production Index (2014-2016=100)'


def draw_line_graph(
        title: str,
        y: str,
        colour: str,
        *,
        highlight: Optional[Tuple[int, Union[int, float]]] = None,
        xaxis: Mapping[str, Any] = {},
        yaxis: Mapping[str, Any] = {},
        hovertemplate: Optional[str] = None
) -> dcc.Graph:
    """Generates a line graph.

    Parameters
    ----------
    title : str
        The title of the graph.
    y : pd.Series
        The column name of the y-axis of the graph.
    colour : str
        The hexadecimal representation of the RGB colour of the line.
    highlight : Tuple[int, float or int], optional, default=None
        A specific data point to specially highlight.
    xaxis : Mapping[str, Any], default={}
        Configuration options for the x-axis label.
        By default, the 'fixedrange' option is set to `True`.
    yaxis : Mapping[str, Any], default={}
        Configuration options for the y-axis label.
        By default, the 'fixedrange' option is set to `True`.
    hovertemplate : str, optional, default=None
        Template for data label upon mouse hover.
        If left blank (default), uses the default set by Dash instead.

    Returns
    -------
    go.Figure
        The graph element generated by Dash.
    """

    # Process data to plot
    # Reference: https://plotly.com/python/hover-text-and-formatting/
    fig = px.line(
        data_frame=data,
        x='Year',
        y=y,
        title=title,
        markers=False,
        color_discrete_sequence=[ colour ]
    )

    # Highlight given data point
    if highlight is not None:
        fig.add_trace(
            go.Scatter(
                x=[ highlight[0] ],
                y=[ highlight[1] ],
                line=dict(color=HIGHLIGHT_COLOUR),
                showlegend=False
            )
        )

    fig.update_traces(
        mode='markers+lines',
        hovertemplate=hovertemplate,

    )
    fig.update_layout({
        'hovermode': 'x unified',
        'xaxis': { 'fixedrange': True } | xaxis,
        'yaxis': { 'fixedrange': True } | yaxis
    })

    return fig


def get_header() -> html.Div:
    """Generates the web page header.

    Returns
    -------
    html.Div
        The web page header.
    """

    return html.Div(
        children=[
            html.P(
                children='ðŸ‡¸ðŸ‡´',
                className='header-emoji'
            ),
            html.H1(
                children=APP_TITLE,
                className='header-title'
            ),
            html.P(
                children= \
                    'Predicting the volume of livestock production by analysing foreign aid, ' +
                    'demographic trends, economic indicators, and climate variables.',
                className='header-description'
            )
        ],
        className='header'
    )


def get_date_picker(
        *,
        min_year: int = 1980,
        max_year: int = 2021
) -> html.Div:
    """Generates a single date picker.

    Parameters
    ----------
    min_year : int, default=1980
        The minimum year selectable.
    max_year : int, default=2021
        The maximum year selectable.

    Returns
    -------
    html.Div
        The HTML div element for the date picker.
    """

    min_date = date(min_year, 1, 1)
    max_date = date(max_year, 12, 31)

    return html.Div(children=[
        html.Div(
            children='Date (Year)',
            className=MENU_TITLE_ID
        ),
        dcc.DatePickerSingle(
            id=DATE_PICKER_ID,
            min_date_allowed=min_date,
            max_date_allowed=max_date,
            initial_visible_month=max_date,
            placeholder='Select date'
        )
    ])


def get_arrow(colour: str) -> html.Div:
    """Generates an arrow.

    Parameters
    ----------
    colour : str
        The colour of the arrow.

    Returns
    -------
    html.Div
        The HTML div element containing the arrow.
    """

    return html.Div(
        children='âŸ¶',
        style={
            'font-size': '50px',
            'font-weight': 'bold',
            'color': colour
        }
    )


def get_input(
        id: str,
        title: str,
        min_val: Union[float, int],
        max_val: Union[float, int],
        step: Union[float, int],
        *,
        placeholder: str = 'Enter value here'
) -> html.Div:
    """Generates the HTML element for a single input.

    Parameters
    ----------
    id : str
        The ID of the input.
    title : str
        The title of the input.
    min_val : float or int
        The minimum acceptable value of the input.
    max_val : float or int
        The maximum acceptable value of the input.
    step : float or int
        The smallest increment of the input.
    placeholder : str, default='Enter value here'
        The placeholder for the input element.

    Returns
    -------
    html.Div
        The HTML element for a single input.
    """

    return html.Div(
        children=[
            html.Div(
                children=title,
                className=MENU_TITLE_ID
            ),
            html.Div(
                children=[
                    dcc.Input(
                        id=f'{id}-input',
                        type='number',
                        debounce=False,
                        placeholder=placeholder,
                        min=min_val,
                        max=max_val,
                        step=step,
                        style={
                            'height': '30px',
                            'width': '40vw',
                            'margin-right': '10px'
                        }
                    ),
                    dcc.Input(
                        id=f'{id}-range',
                        type='range',
                        debounce=False,
                        min=min_val,
                        max=max_val,
                        step=step,
                        style={ 'width': '60vw' }
                    )
                ],
                className='input-wrapper'
            )
        ],
        style={ 'width': '40vw' }
    )


def get_menu() -> html.Div:
    """Generates the prediction menu.

    Returns
    -------
    html.Div
        The HTML div element for the prediction menu.
    """

    return html.Div(
        children=[
            get_date_picker(),
            get_arrow(MENU_FEATURE_COLOUR),
            html.Div(children=[
                get_input(
                    id='aid',
                    title=AID_TITLE,
                    min_val=0,
                    max_val=int(5e9),
                    step=int(1e5)
                ),
                get_input(
                    id='birth',
                    title=BIRTH_TITLE,
                    min_val=0,
                    max_val=100,
                    step=0.1
                ),
                get_input(
                    id='death',
                    title=DEATH_TITLE,
                    min_val=0,
                    max_val=100,
                    step=0.1
                ),
                get_input(
                    id='inflation',
                    title=INFLATION_TITLE,
                    min_val=-100,
                    max_val=300,
                    step=0.1
                ),
                get_input(
                    id='rainfall',
                    title=RAINFALL_TITLE,
                    min_val=0,
                    max_val=500,
                    step=0.1
                ),
                get_input(
                    id='temperature',
                    title=AID_TITLE,
                    min_val=10,
                    max_val=45,
                    step=0.1
                )
            ]),
            get_arrow(MENU_TARGET_COLOUR),
            html.Div(children=[
                html.Div(
                    children=LIVESTOCK_TITLE,
                    style={
                        'margin-bottom': '6px',
                        'font-weight': 'bold',
                        'color': MENU_TARGET_COLOUR
                    }
                ),
                html.Div(
                    children=[dcc.Input(
                        id='livestock-input',
                        type='number',
                        readOnly=True,
                        debounce=False,
                        placeholder='Predicted value here',
                        style={ 'height': '30px', 'width': '16vw' }
                    )],
                    className='input-wrapper'
                )
            ])
        ],
        className='menu'
    )


def get_aid_figure(
        *,
        highlight: Optional[Tuple[int, int]] = None
) -> go.Figure:
    """Generates the graph for foreign aid.

    Parameters
    ----------
    highlight : Tuple[int, int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for foreign aid.
    """

    return draw_line_graph(
        title=AID_TITLE,
        y='Aid',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        yaxis={ 'tickprefix': '$' },
        hovertemplate='$%{y:.2f}<extra></extra>'
    )


def get_aid_chart() -> html.Div:
    """Generates the HTML graph element for foreign aid.

    Returns
    -------
    html.Div
        The HTML graph element for foreign aid.
    """

    return html.Div(
        children=dcc.Graph(
            id='aid-chart',
            config={ 'displayModeBar': False },
            figure=get_aid_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_birth_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for birth rate.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for birth rate.
    """

    return draw_line_graph(
        title=BIRTH_TITLE,
        y='Birth',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        hovertemplate='%{y:.2f}<extra></extra>'
    )


def get_birth_chart() -> html.Div:
    """Generates the HTML graph element for birth rate.

    Returns
    -------
    html.Div
        The HTML graph element for birth rate.
    """

    return html.Div(
        children=dcc.Graph(
            id='birth-chart',
            config={ 'displayModeBar': False },
            figure=get_birth_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_death_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for death rate.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for death rate.
    """

    return draw_line_graph(
        title=DEATH_TITLE,
        y='Death',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        hovertemplate='%{y:.2f}<extra></extra>'
    )


def get_death_chart() -> html.Div:
    """Generates the HTML graph element for death rate.

    Returns
    -------
    html.Div
        The HTML graph element for death rate.
    """

    return html.Div(
        children=dcc.Graph(
            id='death-chart',
            config={ 'displayModeBar': False },
            figure=get_death_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_inflation_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for inflation.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for inflation.
    """

    return draw_line_graph(
        title=INFLATION_TITLE,
        y='Inflation',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        yaxis={ 'ticksuffix': '%' },
        hovertemplate='%{y:.2f}%<extra></extra>'
    )


def get_inflation_chart() -> html.Div:
    """Generates the HTML graph element for inflation.

    Returns
    -------
    html.Div
        The HTML graph element for inflation.
    """

    return html.Div(
        children=dcc.Graph(
            id='inflation-chart',
            config={ 'displayModeBar': False },
            figure=get_inflation_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_rainfall_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for rainfall.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for rainfall.
    """

    return draw_line_graph(
        title=RAINFALL_TITLE,
        y='Rain',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        yaxis={ 'ticksuffix': 'mm' },
        hovertemplate='%{y:.2f}mm<extra></extra>'
    )


def get_rainfall_chart() -> html.Div:
    """Generates the HTML graph element for rainfall.

    Returns
    -------
    html.Div
        The HTML graph element for rainfall.
    """

    return html.Div(
        children=dcc.Graph(
            id='rainfall-chart',
            config={ 'displayModeBar': False },
            figure=get_rainfall_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_temp_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for temperature.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for temperature.
    """

    return draw_line_graph(
        title=TEMPERATURE_TITLE,
        y='Temperature',
        colour=FEATURE_COLOUR,
        highlight=highlight,
        yaxis={ 'ticksuffix': 'Â°C' },
        hovertemplate='%{y:.2f}Â°C<extra></extra>'
    )


def get_temp_chart() -> html.Div:
    """Generates the HTML graph element for temperature.

    Returns
    -------
    html.Div
        The HTML graph element for temperature.
    """

    return html.Div(
        children=dcc.Graph(
            id='temperature-chart',
            config={ 'displayModeBar': False },
            figure=get_temp_figure(),
            style={'width': '32vw', 'height': '45vh'}
        ),
        className=CARD_ID
    )


def get_livestock_figure(
        *,
        highlight: Optional[Tuple[int, Union[float, int]]] = None
) -> go.Figure:
    """Generates the graph for livestock production index.

    Parameters
    ----------
    highlight : Tuple[int, float or int], optional, default=None
        A given data point to specially highlight.

    Returns
    -------
    go.Figure
        The graph for livestock production index.
    """

    return draw_line_graph(
        title=LIVESTOCK_TITLE,
        y='Livestock',
        colour=TARGET_COLOUR,
        highlight=highlight,
        hovertemplate='%{y:.2f}<extra></extra>'
    )


def get_livestock_chart() -> html.Div:
    """Generates the HTML graph element for livestock production index.

    Returns
    -------
    html.Div
        The HTML graph element for livestock production index.
    """

    return html.Div(
        children=dcc.Graph(
            id='livestock-chart',
            config={ 'displayModeBar': False },
            figure=get_livestock_figure(),
            style={'width': '100vw', 'height': '100vh'}
        ),
        className=CARD_ID
    )


def sync_inputs(
        id: str
) -> Callable[[Union[float, int], Union[float, int]],
              Tuple[Union[float, int], Union[float, int]]]:
    """Dynamically creates a callback function to sync an input and slider duo.

    Parameters
    ----------
    id : str
        The common ID between the input and slider.

    Returns
    -------
    Callable[[Union[float, int], Union[float, int]], Tuple[Union[float, int], Union[float, int]]]
        The callback function which syncs the input and slider.
    """

    @callback(
        Output(f'{id}-input', 'value', allow_duplicate=True),
        Output(f'{id}-range', 'value'),
        Input(f'{id}-input', 'value'),
        Input(f'{id}-range', 'value'),
        prevent_initial_call=True
    )
    def sync_callback(
            input_val: Union[float, int],
            slider_val: Union[float, int]
    ) -> Tuple[Union[float, int], Union[float, int]]:
        """Synchronises the value between a given input and slider.

        https://dash.plotly.com/advanced-callbacks#synchronizing-a-slider-with-a-text-input-example

        Parameters
        ----------
        input_val : float or int
            The value of the input.
        slider_val : float or int
            The value of the slider.

        Returns
        -------
        Tuple[Union[float, int], Union[float, int]]
            The synchronised value.
        """

        trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
        value = input_val if trigger_id == f'{id}-input' else slider_val
        return value, value

    return sync_callback


@callback(
    Output('aid-input', 'value'),
    Output('birth-input', 'value'),
    Output('death-input', 'value'),
    Output('inflation-input', 'value'),
    Output('rainfall-input', 'value'),
    Output('temperature-input', 'value'),
    Output('livestock-input', 'value'),
    Output('aid-chart', 'figure'),
    Output('birth-chart', 'figure'),
    Output('death-chart', 'figure'),
    Output('inflation-chart', 'figure'),
    Output('rainfall-chart', 'figure'),
    Output('temperature-chart', 'figure'),
    Output('livestock-chart', 'figure'),
    Input(DATE_PICKER_ID, 'date'),
    Input('aid-input', 'value'),
    Input('birth-input', 'value'),
    Input('death-input', 'value'),
    Input('inflation-input', 'value'),
    Input('rainfall-input', 'value'),
    Input('temperature-input', 'value')
)
def predict(
        date_val: str,
        aid_val: str,
        birth_val: str,
        death_val: str,
        inflation_val: str,
        rainfall_val: str,
        temperature_val: str
) -> Tuple[
        Union[float, int],
        Union[float, int],
        Union[float, int],
        Union[float, int],
        Union[float, int],
        Union[float, int],
        Union[float, int],
        go.Figure,
        go.Figure,
        go.Figure,
        go.Figure,
        go.Figure,
        go.Figure,
        go.Figure
]:
    """Perform prediction based on (hardcoded) multiple linear regression model.

    Parameters
    ----------
    date_val : str
        The selected date, in the format 'YYYY-MM-DD'.
    aid_val : str
        The input aid value.
    birth_val : str
        The input birth value.
    death_val : str
        The input death value.
    inflation_val : str
        The input inflation value.
    rainfall_val : str
        The input rainfall value.
    temperature_val : str
        The input temperature value.

    Returns
    -------
    Tuple[ Union[float, int], ..., go.Figure, ... ]
        Feature values, predicted target value, and respective graphical representations.
    """

    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    try:
        year = int(date_val.split('-')[0])
    except AttributeError:
        return [no_update] * 14

    # Perform prediction
    if trigger_id == DATE_PICKER_ID:
        vals = data.loc[
            data['Year'] == year,
            ['Aid', 'Birth', 'Death', 'Inflation', 'Rain', 'Temperature']
        ].squeeze().tolist()
        vals[0] = vals[0] // int(1e5) * int(1e5)
        for i in range(1, len(vals)):
            vals[i] = round(vals[i], 1)
    else:
        try:
            vals = (
                float(aid_val),
                float(birth_val),
                float(death_val),
                float(inflation_val),
                float(rainfall_val),
                float(temperature_val)
            )
        except TypeError:
            return [no_update] * 14

    pred = round(sum(vals) / float(1e8), 1) # TODO insert multiple linear regression model here

    # Update plots
    plots = [
        get_aid_figure(highlight=(year, vals[0])),
        get_birth_figure(highlight=(year, vals[1])),
        get_death_figure(highlight=(year, vals[2])),
        get_inflation_figure(highlight=(year, vals[3])),
        get_rainfall_figure(highlight=(year, vals[4])),
        get_temp_figure(highlight=(year, vals[5])),
        get_livestock_figure(highlight=(year, pred))
    ]

    return *vals, pred, *plots


if __name__ == '__main__':
    # Read the data from the CSV file
    data = pd.read_csv('Datas.csv').sort_values(by='Year')

    # Set up the dashboard
    app = Dash(
        __name__,
        external_stylesheets=EXTERNAL_STYLESHEET,
        title=APP_TITLE
    )
    app.layout = html.Div(children=[
        get_header(),
        get_menu(),

        # Feature Variable Distribution
        html.Div(
            children=[
                get_aid_chart(),
                get_birth_chart(),
                get_death_chart()
            ],
            className=WRAPPER_ID
        ),
        html.Div(
            children=[
                get_inflation_chart(),
                get_rainfall_chart(),
                get_temp_chart()
            ],
            className=WRAPPER_ID
        ),

        # Target Variable Distribution
        html.Div(
            children=get_livestock_chart(),
            className=WRAPPER_ID
        )
    ])

    # Create callbacks
    for _id in ('aid', 'birth', 'death', 'inflation', 'rainfall', 'temperature'):
        sync_inputs(_id)

    # Run the server
    app.run_server(debug=True)
