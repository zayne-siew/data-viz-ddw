from typing import Any, Mapping

from dash import Dash, dcc, html
import pandas as pd


# Define constants
APP_TITLE = 'Predicting Livestock Production in Somalia'
EXTERNAL_STYLESHEET = [{
    'href': 'https://fonts.googleapis.com/css2?family=Lato:wght@400;700&display=swap',
    'rel': 'stylesheet'
}]


def draw_line_graph(
        id: str,
        title: str,
        x: pd.Series,
        y: pd.Series,
        colourway: str,
        *,
        xaxis: Mapping[str, Any] = {},
        yaxis: Mapping[str, Any] = {},
        hovertemplate: str = '',
        style: Mapping[str, Any] = {'width': '32vw', 'height': '45vh'}
) -> dcc.Graph:
    """Generates a line graph HTML element.

    Parameters
    ----------
    id : str
        The HTML ID of the graph element.
    title : str
        The title of the graph.
    x : pd.Series
        The data on the x-axis of the graph.
    y : pd.Series
        The data on the y-axis of the graph.
    colourway : str
        The hexadecimal representation of the RGB colour of the line.
    xaxis : Mapping[str, Any], default={}
        Configuration options for the x-axis label.
        By default, the 'fixedrange' option is set to `True`.
    yaxis : Mapping[str, Any], default={}
        Configuration options for the y-axis label.
        By default, the 'fixedrange' option is set to `True`.
    hovertemplate : str, default=''
        Template for data label upon mouse hover.
        If left blank (default), uses the default set by Dash instead.
    style : Mapping[str, Any], default={'width': '32vw', 'height': '45vh'}
        Other styling options for the line graph.

    Returns
    -------
    dcc.Graph
        The graph element generated by Dash.
    """

    # Process data to plot
    data = {
        'x': x,
        'y': y,
        'type': 'lines'
    }
    if hovertemplate:
        data['hovertemplate'] = hovertemplate

    return dcc.Graph(
        id=id,
        config={ 'displayModeBar': False },
        figure={
            'data': [ data ],
            'layout': {
                'title': {
                    'text': title,
                    'x': 0.05,
                    'xanchor': 'left'
                },
                'xaxis': { 'fixedrange': True } | xaxis,
                'yaxis': { 'fixedrange': True } | yaxis,
                'colorway': [ colourway ]
            }
        },
        style=style
    )


def get_header() -> html.Div:
    """Generates the web page header.

    Returns
    -------
    html.Div
        The web page header.
    """

    return html.Div(
        children=[
            html.P(
                children='ðŸ‡¸ðŸ‡´',
                className='header-emoji'
            ),
            html.H1(
                children=APP_TITLE,
                className='header-title'
            ),
            html.P(
                children= \
                    'Predicting the volume of livestock production by analysing foreign aid, ' +
                    'demographic trends, economic indicators, and climate variables.',
                className='header-description'
            )
        ],
        className='header'
    )


def get_aid_chart() -> html.Div:
    """Generates the HTML graph element for foreign aid.

    Returns
    -------
    html.Div
        The HTML graph element for foreign aid.
    """

    return html.Div(
        children=draw_line_graph(
            'aid-chart',
            'Net Developmental Assistance (USD)',
            data['Year'],
            data['Aid'],
            '#17b897',
            yaxis={ 'tickprefix': '$' },
            hovertemplate='(%{x}, $%{y:.2f})<extra></extra>'
        ),
        className='card'
    )


def get_birth_chart() -> html.Div:
    """Generates the HTML graph element for birth rate.

    Returns
    -------
    html.Div
        The HTML graph element for birth rate.
    """

    return html.Div(
        children=draw_line_graph(
            'birth-chart',
            'Births per 1000 People',
            data['Year'],
            data['Birth'],
            '#17b897'
        ),
        className='card'
    )


def get_death_chart() -> html.Div:
    """Generates the HTML graph element for death rate.

    Returns
    -------
    html.Div
        The HTML graph element for death rate.
    """

    return html.Div(
        children=draw_line_graph(
            'death-chart',
            'Deaths per 1000 People',
            data['Year'],
            data['Death'],
            '#17b897'
        ),
        className='card'
    )


def get_inflation_chart() -> html.Div:
    """Generates the HTML graph element for inflation.

    Returns
    -------
    html.Div
        The HTML graph element for inflation.
    """

    return html.Div(
        children=draw_line_graph(
            'inflation-chart',
            'Consumer Price Inflation (YoY)',
            data['Year'],
            data['Inflation'],
            '#17b897',
            yaxis={ 'ticksuffix': '%' },
            hovertemplate='(%{x}, %{y:.2f}%)<extra></extra>'
        ),
        className='card'
    )


def get_rainfall_chart() -> html.Div:
    """Generates the HTML graph element for rainfall.

    Returns
    -------
    html.Div
        The HTML graph element for rainfall.
    """

    return html.Div(
        children=draw_line_graph(
            'rainfall-chart',
            'Annual Mean Rainfall',
            data['Year'],
            data['Rain'],
            '#17b897',
            yaxis={ 'ticksuffix': 'mm' },
            hovertemplate='(%{x}, %{y:.2f}mm)<extra></extra>'
        ),
        className='card'
    )


def get_temp_chart() -> html.Div:
    """Generates the HTML graph element for temperature.

    Returns
    -------
    html.Div
        The HTML graph element for temperature.
    """

    return html.Div(
        children=draw_line_graph(
            'temp-chart',
            'Annual Mean Temperature',
            data['Year'],
            data['Temperature'],
            '#17b897',
            yaxis={ 'ticksuffix': 'Â°C' },
            hovertemplate='(%{x}, %{y:.2f}Â°C)<extra></extra>'
        ),
        className='card'
    )


def get_livestock_chart() -> html.Div:
    """Generates the HTML graph element for livestock production index.

    Returns
    -------
    html.Div
        The HTML graph element for livestock production index.
    """

    return html.Div(
        children=draw_line_graph(
            'livestock-chart',
            'Livestock Production Index (2014-2016=100)',
            data['Year'],
            data['Livestock'],
            '#E12D39',
            style={'width': '100vw', 'height': '100vh'}
        ),
        className='card'
    )


if __name__ == '__main__':
    # Read the data from the CSV file
    data = pd.read_csv('Datas.csv').sort_values(by='Year')

    # Set up the dashboard
    app = Dash(
        __name__,
        external_stylesheets=EXTERNAL_STYLESHEET,
        title=APP_TITLE
    )
    app.layout = html.Div(children=[
        get_header(),

        # TODO user Input

        # Feature Variable Distribution
        html.Div(
            children=[
                get_aid_chart(),
                get_birth_chart(),
                get_death_chart()
            ],
            className='wrapper'
        ),
        html.Div(
            children=[
                get_inflation_chart(),
                get_rainfall_chart(),
                get_temp_chart()
            ],
            className='wrapper'
        ),

        # Target Variable Distribution
        html.Div(
            children=get_livestock_chart(),
            className='wrapper'
        )
    ])

    # Run the server
    app.run_server(debug=True)
